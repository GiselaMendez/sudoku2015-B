import unittest, sys
sys.path.append("../src/algorithms")

from Algoritm_Brute_Force import solve

class TestBruteForceAlgorithm(unittest.TestCase):     
    def test_sudoku_solution_is_correct_one(self):      
      sudoku_to_solve = [[5, 3, 0, 0, 7, 0, 0, 0, 0],
                [6, 0, 0, 1, 9, 5, 0, 0, 0],
                [0, 9, 8, 0, 0, 0, 0, 6, 0],
                [8, 0, 0, 0, 6, 0, 0, 0, 3],
                [4, 0, 0, 8, 0, 3, 0, 0, 1],
                [7, 0, 0, 0, 2, 0, 0, 0, 6],
                [0, 6, 0, 0, 0, 0, 2, 8, 0],
                [0, 0, 0, 4, 1, 9, 0, 0, 0],
                [0, 0, 0, 0, 8, 0, 0, 7, 0]]
      
      sudoku_solved = [[5, 3, 4, 6, 7, 8, 9, 1, 2], 
                      [6, 7, 2, 1, 9, 5, 3, 4, 8], 
                      [1, 9, 8, 3, 4, 2, 5, 6, 7], 
                      [8, 5, 9, 7, 6, 1, 4, 2, 3], 
                      [4, 2, 6, 8, 5, 3, 7, 9, 1], 
                      [7, 1, 3, 9, 2, 4, 8, 5, 6], 
                      [9, 6, 1, 5, 3, 7, 2, 8, 4], 
                      [2, 8, 7, 4, 1, 9, 6, 3, 5], 
                      [3, 4, 5, 2, 8, 6, 1, 7, 9]]
      self.assertEquals(sudoku_solved, solve(sudoku_to_solve))

    def test_sudoku_solution_is_not_empty(self):
      sudoku_to_solve = [[5, 3, 0, 0, 7, 0, 0, 0, 0],
                [6, 0, 0, 1, 9, 5, 0, 0, 0],
                [0, 9, 8, 0, 0, 0, 0, 6, 0],
                [8, 0, 0, 0, 6, 0, 0, 0, 3],
                [4, 0, 0, 8, 0, 3, 0, 0, 1],
                [7, 0, 0, 0, 2, 0, 0, 0, 6],
                [0, 6, 0, 0, 0, 0, 2, 8, 0],
                [0, 0, 0, 4, 1, 9, 0, 0, 0],
                [0, 0, 0, 0, 8, 0, 0, 7, 0]]
      self.assertIsNotNone(solve(sudoku_to_solve))

    def test_sudoku_solution_is_a_matrix_of_numbers(self):
      sudoku_to_solve = [[5, 3, 0, 0, 7, 0, 0, 0, 0],
                [6, 0, 0, 1, 9, 5, 0, 0, 0],
                [0, 9, 8, 0, 0, 0, 0, 6, 0],
                [8, 0, 0, 0, 6, 0, 0, 0, 3],
                [4, 0, 0, 8, 0, 3, 0, 0, 1],
                [7, 0, 0, 0, 2, 0, 0, 0, 6],
                [0, 6, 0, 0, 0, 0, 2, 8, 0],
                [0, 0, 0, 4, 1, 9, 0, 0, 0],
                [0, 0, 0, 0, 8, 0, 0, 7, 0]]
      
      sudoku_solved = [['A', 'A', 'A', 6, 7, 8, 9, 1, 2], 
                      [6, 7, 2, 1, 9, 5, 3, 4, 8], 
                      [1, 9, 8, 3, 4, 2, 5, 6, 7], 
                      [8, 5, 9, 7, 6, 1, 4, 2, 3], 
                      [4, 2, 6, 8, 5, 3, 7, 9, 1], 
                      [7, 1, 3, 9, 2, 4, 8, 5, 6], 
                      [9, 6, 1, 5, 'B', 7, 2, 8, 4], 
                      [2, 8, 7, 4, 1, 9, 6, 3, 5], 
                      [3, 4, 5, 2, 8, 6, 1, 7, 9]]
      self.assertNotEqual(sudoku_solved, solve(sudoku_to_solve))
    
    def test_sudoku_is_solved_when_given_sudoku_has_zero_in_each_cell(self):
      sudoku_to_solve = [[0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]]      

      self.assertIsNotNone(solve(sudoku_to_solve))
    
    def test_sudoku_cannot_be_solved_when_given_sudoku_contains_more_than_9_rows(self):      
      sudoku_to_solve = [[5, 3, 0, 0, 7, 0, 0, 0, 0],
                [6, 0, 0, 1, 9, 5, 0, 0, 0],
                [0, 9, 8, 0, 0, 0, 0, 6, 0],
                [8, 0, 0, 0, 6, 0, 0, 0, 3],
                [4, 0, 0, 8, 0, 3, 0, 0, 1],
                [7, 0, 0, 0, 2, 0, 0, 0, 6],
                [0, 6, 0, 0, 0, 0, 2, 8, 0],
                [0, 0, 0, 4, 1, 9, 0, 0, 0],
                [0, 0, 0, 0, 8, 0, 0, 7, 0],
                [2, 1, 1, 1, 8, 1, 1, 7, 0]]
      
      sudoku_solved = [[5, 3, 4, 6, 7, 8, 9, 1, 2], 
                      [6, 7, 2, 1, 9, 5, 3, 4, 8], 
                      [1, 9, 8, 3, 4, 2, 5, 6, 7], 
                      [8, 5, 9, 7, 6, 1, 4, 2, 3], 
                      [4, 2, 6, 8, 5, 3, 7, 9, 1], 
                      [7, 1, 3, 9, 2, 4, 8, 5, 6], 
                      [9, 6, 1, 5, 3, 7, 2, 8, 4], 
                      [2, 8, 7, 4, 1, 9, 6, 3, 5], 
                      [3, 4, 5, 2, 8, 6, 1, 7, 9]]
      self.assertNotEqual(sudoku_solved, solve(sudoku_to_solve))

    def test_easy_sudoku_is_solved_correctly(self):      
      sudoku_to_solve = [[5, 3, 4, 6, 7, 8, 9, 1, 2],
                [6, 7, 2, 1, 9, 5, 3, 4, 8], 
                [1, 9, 8, 3, 4, 2, 5, 6, 7], 
                [8, 5, 9, 7, 6, 1, 4, 2, 3], 
                [4, 2, 6, 8, 5, 3, 7, 9, 1],
                [7, 0, 0, 0, 2, 0, 0, 0, 6],
                [0, 6, 0, 0, 0, 0, 2, 8, 0],
                [0, 0, 0, 4, 1, 9, 0, 0, 0],
                [0, 0, 0, 0, 8, 0, 0, 7, 0]]
      
      sudoku_solved = [[5, 3, 4, 6, 7, 8, 9, 1, 2], 
                      [6, 7, 2, 1, 9, 5, 3, 4, 8], 
                      [1, 9, 8, 3, 4, 2, 5, 6, 7], 
                      [8, 5, 9, 7, 6, 1, 4, 2, 3], 
                      [4, 2, 6, 8, 5, 3, 7, 9, 1], 
                      [7, 1, 3, 9, 2, 4, 8, 5, 6], 
                      [9, 6, 1, 5, 3, 7, 2, 8, 4], 
                      [2, 8, 7, 4, 1, 9, 6, 3, 5], 
                      [3, 4, 5, 2, 8, 6, 1, 7, 9]]
      self.assertEqual(sudoku_solved, solve(sudoku_to_solve))    

if __name__ == '__main__':
    unittest.main()